# -*- coding: utf-8 -*-
"""Boston House Price Prediction .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1A8hewQ1uMO2l3vlvTR8E4XvYHkZpz9X0
"""

# import dependencies
import pandas as pd
import numpy as np
from sklearn import linear_model
from sklearn.model_selection import train_test_split

# Load the Boston Housing Data set from sklearn.datasets and print it
from sklearn.datasets import load_boston
boston = load_boston() # This will give us a dictionary like object
print(boston)

# Transform the data set into a data frame
# data = the data we want or the independent variables also known as the x values
# feature_names = the column names of the data
# target = the target variable or the price of the houses or the dependent variable also known as y values

df_x = pd.DataFrame(boston.data, columns=boston.feature_names) # extracting data
df_y = pd.DataFrame(boston.target)

# Get some statistics from the data set, like the count, mean
df_x.describe()

# Initialize the linear regression model
reg = linear_model.LinearRegression()

# Split the data into 67% training and 33% testing data
#from pandas.core.common import random_state
x_train, x_test, y_train, y_test = train_test_split(df_x, df_y, test_size= 0.33, random_state= 42)

# Train the model with our training data
reg.fit(x_train, y_train)

# Print the coefficients/weights for each feature/column of our model
print(reg.coef_) # f(x)= mx + b = y .... m is the coefficient. x=> independent value... y=> dependent value
                 # f(x, a) = mx + na + b = y.... m & n are coefficients.

# Print predictions on our test data
y_pred = reg.predict(x_test)
print(y_pred)

# Print the actual values
print(y_test)

# Check the model performance/accuracy using Mean Squared Error (MSE)
print( np.mean((y_pred - y_test)**2))

# Check the model performance/accuracy using Mean Squared Error (MSE) and sklearn.metrics
from sklearn.metrics import mean_squared_error
print( mean_squared_error(y_test, y_pred) )